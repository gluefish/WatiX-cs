/****************************************************************
* Program       - A test file for Selenium Frameworks
* Module        - This is the test script file, partial class same as on webapputils
* Author        - Louie Wilson - gluefish@gmail.com
* Date          - 9/10/15 
* Purpose       - Keyword driven test harness; uses Selenium WebDriver
*               - Parameters fetched from ini file generated by Excel file
*               - Test results stored to .log and .html files
*****************************************************************/

using System;
using System.Collections.Generic;
using System.IO;
using System.Reflection;
using System.Diagnostics;
using System.Net;
using OpenQA.Selenium;
using Microsoft.CSharp;
using System.CodeDom.Compiler;

namespace WebTest
{
    public partial class Program
    {
        public static void compileSource()
        {
            //UNDER CONSTRUCTION
            string source = @"
namespace Foo
{
    public class Bar
    {
        public void SayHello()
        {
            System.Console.WriteLine(""Hello World"");
        }
    }
}
            ";
            Dictionary<string, string> providerOptions = new Dictionary<string, string>
            {
                {"CompilerVersion", "v4" }
            };
            CSharpCodeProvider provider = new CSharpCodeProvider(providerOptions);
            CompilerParameters compilerParams = new CompilerParameters
                {GenerateInMemory = true,
                GenerateExecutable = false};
            CompilerResults results = provider.CompileAssemblyFromSource(compilerParams, source);
            if (results.Errors.Count != 0)
                throw new Exception("Mission Failed");
            object o = results.CompiledAssembly.CreateInstance("Foo.Bar");
            MethodInfo mi = o.GetType().GetMethod("SayHello");
            mi.Invoke(o, null);
        }

        public static void click(string elem)
        {
            w("    Clicking " + elem);
            try
            {
                d.FindElement(By.Id(elem)).Click();
            } catch (Exception e)
            {
                errstring = e.ToString();
            }
        }

        public static string curdir()
        {
            string app_path = System.IO.Path.GetDirectoryName(new System.Uri(System.Reflection.Assembly.GetExecutingAssembly().CodeBase).LocalPath);
            return app_path;
        }

        public static string curname()
        {
            string pn = Process.GetCurrentProcess().ProcessName;
            string[] strArr = null;
            strArr = pn.Split('.');
            string cn = strArr[0];
            return cn;
        }

        public static string dtstring()
        {
            string ts = DateTime.Now.ToString("yyMMddHHmmss");
            return ts;
        }

        public static void exec(string Cmd)
        {
            Program o = new Program();
            Type t = typeof(Program);
            MethodInfo m = t.GetMethod(Cmd);
            m.Invoke(o, null);
        }

        public static string getVal(string filespec, string var)
        {
            w("  ..." + var + " = " + "xyzzy");

            return "xyzzy";
        }

        public static void go(string url)
        {
            w("  ...Navigating to " + url);
            d.Navigate().GoToUrl(url);
        }

        public static void mkdir(string dirname)
        {
            Directory.CreateDirectory(curdir() + "\\" + dirname);
        }

        public static string readIniFile(string filename, string varname)
        {
            string v;
            using (StreamReader s = new StreamReader(filename))
            {
                while (!s.EndOfStream)
                {
                    v = s.ReadLine();
                    string[] vv = v.Split('=');
                    if (vv[0] == varname)
                    {
                        return vv[1];
                    }
                }
            }
            return null;
        }

        public static void startIE(string filespec)
        {
            // Start an IE browser session displaying a local .html page
            System.Diagnostics.Process proc = new System.Diagnostics.Process();
            proc.EnableRaisingEvents = false;
            proc.StartInfo.FileName = "iexplore";
            w(filespec);
            proc.StartInfo.Arguments = filespec;
            proc.Start();
        }

        public static void timeout(int seconds)
        {
            w("  ...Setting implicit timeout to " + seconds);
            d.Manage().Timeouts().ImplicitlyWait(TimeSpan.FromSeconds(seconds));
        }

        public static string timeStamp()
        {
            string ts = DateTime.Now.ToString("HH.mm.ss.fff");
            return ts;
        }

        public static void type(string elem, string str)
        {
            w("  ...Typing " + str + " into " + elem);
            d.FindElement(By.Id(elem)).SendKeys(str);
        }

        public static void typex(string elem, string str)
        {
            // Modify this to fit your AUT
            // In this case, the inputs all had a 'test-id'
            w("  ...Typing " + str + " into " + elem + " (by xpath)");
            string xquery = "//input[contains(@test-id, '" + elem + "')]";
            d.FindElement(By.XPath(xquery));
        }

        public static void w(string xx)
        {
            Console.Out.WriteLine(xx);
            if (outlevel > 0)
            {
                write2log("webtest.log", xx);
            }
        }

        public static void write2log(string filename, string txt)
        {
            Console.WriteLine(timeStamp() + " " + txt);
            StreamWriter sw = File.AppendText(filename);
            if (txt == "")
            {
                sw.WriteLine(",");
            }
            else
            {
                if (txt.StartsWith("["))
                {
                    sw.WriteLine("txt");
                }
                else
                {
                    sw.WriteLine(timeStamp() + " " + txt);
                }
            }
            sw.Close();
            if (txt.StartsWith(","))
            {
                string csvfile = filename.Replace(".log", ".csv");
                sw = File.AppendText(csvfile);
                sw.WriteLine(" " + timeStamp() + txt);
                sw.Close();
            }
        }

        public static void writeHeader(string logfile, string title)
        {
            var cbc = Console.BackgroundColor;
            Console.BackgroundColor = ConsoleColor.DarkGreen;
            w(title);
            write2log(logfile, "*****************************************************");
            write2log(logfile, title);
            write2log(logfile, "*****************************************************");
            Console.BackgroundColor = cbc;
        }
    }
}
